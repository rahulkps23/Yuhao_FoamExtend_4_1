/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.1                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      dynamicMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dynamicFvMesh   dynamicPolyRefinementFvMesh;

dynamicPolyRefinementFvMeshCoeffs
{
    // Dynamic mesh procedure controls

    // Refine every refineInterval step
    refineInterval   1;

    // Unrefine every unrefineInterval step
    unrefineInterval 1;

    // Separate refinement/unrefinement steps. In case this is switched on,
    // if both refinement and unrefinement should have been performed in a
    // single step, unrefinement is skipped. Switched off by default, meaning
    // that it should be safe to perform both at the same time
    separateUpdates false;

    // Refinement selection criteria
    refinementSelection
    {
        // Refines all cells with 0.001 < alpha < 0.999, otherwise unrefines
        // previously refined cells
        type        fieldBoundsRefinement;
        fieldName   alpha;
        lowerBound  0.001;
        upperBound  0.999;

        // Whether to use cell-point-cell smoothing for selecting refinement
        // candidates. Off by default
        cellPointCellSmoothing off;
    }

    // Polyhedral refinement engine controls
    active yes;

    // Maximum number of cells to allow (not strictly controlled)
    maxCells             2000000;

    // Maximum refinement level
    maxRefinementLevel   3;

    // Number of buffer layers between refinement levels
    nRefinementBufferLayers        1;

    // Number of buffer layers for unrefinement in order to run away from the
    // region that is getting refined at the same time in order to avoid point
    // level inconsistencies
    nUnrefinementBufferLayers      4;

    // Whether to use edge based consistency check. Needed when one allows more
    // than 2 refinement levels (automatically switched on)
    edgeBasedConsistency           yes;
}


// ************************************************************************* //
