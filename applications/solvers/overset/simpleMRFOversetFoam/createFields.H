    Info << "Reading field p\n" << endl;
    volScalarField p
    (
        IOobject
        (
            "p",
            runTime.timeName(),
            mesh,
            IOobject::MUST_READ,
            IOobject::AUTO_WRITE
        ),
        mesh
    );

    Info<< "Reading field U\n" << endl;
    volVectorField U
    (
        IOobject
        (
            "U",
            runTime.timeName(),
            mesh,
            IOobject::MUST_READ,
            IOobject::AUTO_WRITE
        ),
        mesh
    );

#   include "createPhi.H"

    // Set reference cell taking into account whether implicit or explicit
    // overset aglorithm is used for field p.
    label pRefCell = 0;
    scalar pRefValue = 0.0;
    om.setRefCell(p, simple.dict(), pRefCell, pRefValue);

    mesh.schemesDict().setFluxRequired(p.name());


    singlePhaseTransportModel laminarTransport(U, phi);

    autoPtr<incompressible::RASModel> turbulence
    (
        incompressible::RASModel::New(U, phi, laminarTransport)
    );

    // Create MRF zones
    MRFZones mrfZones(mesh);
    mrfZones.correctBoundaryVelocity(U);

    // Create Urel as a permanent field to make it available for on-the-fly
    // post-processing operations
    volVectorField Urel
    (
        IOobject
        (
            "Urel",
            runTime.timeName(),
            mesh,
            IOobject::NO_READ,
            IOobject::AUTO_WRITE
        ),
        U
    );
    mrfZones.relativeVelocity(Urel);

    Info<< "Reading field rAU if present\n" << endl;
    volScalarField rAU
    (
        IOobject
        (
            "rAU",
            runTime.timeName(),
            mesh,
            IOobject::READ_IF_PRESENT,
            IOobject::AUTO_WRITE
        ),
        mesh,
        dimensionedScalar("dt", dimTime, 1.0),
        zeroGradientFvPatchScalarField::typeName
    );

#   include "writeOversetMasks.H"
