/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.0                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

DebugSwitches
{

  //     immersedBoundary 1;
  //    immersedBoundaryFvPatch 10;
    // polyMesh 2;
    // fvMesh   2;
  /*
    immersedBoundary 2;
    immersedBoundaryCorrectedMeshFields 2;
    immersedBoundaryEpsilonWallFunction 2;
    immersedBoundaryKqRWallFunction 2;
    immersedBoundaryNutWallFunction 2;
    immersedBoundaryOmegaWallFunction 2;
    foo 2;
  */
}

application     pimpleDyMIbFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         5;

deltaT          0.01;

// writeControl    runTime;
// writeInterval   0.2;

writeControl    timeStep;
writeInterval   5;

purgeWrite      0;

writeFormat     binary;

writePrecision  6;

writeCompression uncompressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  no;

maxCo           0.2;

libs
(
    "libimmersedBoundary.so"
    "libimmersedBoundaryDynamicMesh.so"
    //   "libimmersedBoundaryTurbulence.so"
"libincompressibleImmersedBoundaryTurbulence.so"
);

functions
(
    forces
    {
        type               forces;
        functionObjectLibs ("libforces.so");

        outputControl timeStep;
        outputInterval 1;
        patches (  ibCylinder2);

        pName       p;
        UName       U;
        rhoName     rhoInf;
        rhoInf      1;

        log         true;
        CofR        ( 0 0 0 );

        Aref 0.05;
        Uref 1;
    }
    /*
    probes
    {
        type            probes;
        functionObjectLibs ("libsampling.so");
        outputControl   timeStep;
        outputInterval  1;
        probeLocations
        (
            ( 1.5 0 0)
            ( 1.75 0 0)
        );
        fields
        (
            p
        );
    }
    minMaxP
    {
        type minMaxField;
        functionObjectLibs ("libfieldFunctionObjects.so");
        name p;
    }
    minMaxU
    {
        type minMaxField;
        functionObjectLibs ("libfieldFunctionObjects.so");
        name U;
    }
    minMaxNut
    {
        type minMaxField;
        functionObjectLibs ("libfieldFunctionObjects.so");
        name nut;
    }
    minMaxK
    {
        type minMaxField;
        functionObjectLibs ("libfieldFunctionObjects.so");
        name k;
    }
    minMaxNut
    {
        type minMaxField;
        functionObjectLibs ("libfieldFunctionObjects.so");
        name epsilon;
    }
    */
);


// ************************************************************************* //
